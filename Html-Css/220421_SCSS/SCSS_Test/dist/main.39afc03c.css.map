{"version":3,"sources":["sub.scss","sub2.scss","main.scss"],"names":[],"mappings":"AACE;EACE;;AADF;EACE,wBAAA;;;ACFJ;EACE,2BAAA;;;ACWA;EAIE,4BAAA;EACA,eAAA;;;AAUA;EACE,eAAA;;AAEA;EACE,gBAAA;;AAGF;EACE,aAAA;;;AASR;EACE,kBAAA;;AAGA;EACE,UAAA;;;AAQA;EACE,eAAA;;;AAOJ;EACE,eAAA;;AAGF;EACE,eAAA;;AAGF;EACE,eAAA;;;AAMJ;EAKI,iBAAA;EACA,eAAA;EACA,uBAAA;EAIA,gBAAA;EACA,iBAAA;EAIA,iBAAA;EACA,oBAAA;EACA,kBAAA;EACA,mBAAA;;;AASJ;EAEE,eAAA;EACA,UAFO;EASP,UALS;;AADT;EAEE,WADO;EAEP,YAFO;EAGP,2BAAA;;;AAcJ;EACE,WAAA;EACA,YAAA;EACA,eAAA;EACA,cAAA;EACA,YAAA;;;AAGF;EACE,2BAAA;EACA,yBAAA;EACA,aAAA;;;AAsCF;EAPE,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAKgB;EAJhB,aAIgB;;AAChB;EATA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAJmB;EAKnB,aALmB;;AAgBnB;EAfA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,YAJmB;EAKnB,aALmB;;;AA0BnB;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AADF;EACE,YAAA;;;AAmBJ;EAEE,YADQ;EAER,YAAA;EAbA,aAAA;EACA,uBAAA;EACA,mBAAA;;;AAgBF;EAGE,YAAA;EACA,aAAA;EACA,YAAA;EACA,mBAAA;EACA,2BANQ;;AAQR;EACE,yBAAA;;AAGF;EA2BE,yCAAA;;;AA0BF;EACE,aAbG;;;AAYL;EACE,gBAbG;;;AAYL;EACE,aAbG;;;AAkBL;EACE,aAhBE;;;AAeJ;EACE,gBAhBE;;;AAeJ;EACE,aAhBE;;;AA6BN;EACE,YAAA;EACA,aAAA;EARA,kBAAA;EACA,MAAA;EACA,OAAA;;;AAUF;EACE,YAAA;EACA,aAAA;EAdA,kBAAA;EACA,MAAA;EACA,OAAA;EAcE,SAAA;EACA,QAAA;EACA,YAAA","file":"main.39afc03c.css","sourceRoot":"..","sourcesContent":["body {\n  .container {\n    background-color: orange;\n  }\n}","body {\n  background-color: rosybrown;\n}","// 가져오기!!\n@import url(\"./sub.scss\"); //기본방법\n\n// 여러개의 css 파일을 간소화 하는 방법으로 가져올 수 있다.\n@import \"./sub.scss\", \"/sub2.scss\"; \n\n// 변수화\n$color: royalblue;\n\n.container {\n\n  //중첩 \n  h1 {\n    //컴파일 시 해당 주석은 컴파일 되지 않는다.\n    // color: $color;\n    // 커파일 시 해당 주석은 컴파일되어 컴파일 파일에 주석 표시 된다.\n    /*background-color: orange;*/\n    font-size: 60px;\n  }\n}\n\n//중첩관련 학습\n\n.container {\n\n  // 자식요소를 선언하기 위해서는 앞부분에 작성하면된다.\n  >ul {\n    li {\n      font-size: 40px;\n\n      .name {\n        color: royalblue\n      }\n\n      .age {\n        color: orange\n      }\n    }\n  }\n}\n\n\n// 상위 선택자 참조\n\n.btn {\n  position: absolute;\n\n  //& == .btn 상위의 선택자를 참조한다\n  &.active {\n    color: red;\n  }\n}\n\n.list {\n  li {\n\n    // & == li  자신이 선언된 영역의 상위 선택자를 참조(치환)한다.\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n}\n\n//상위 선택자를 참조해서 간소화 한다.\n.fs {\n  &-small {\n    font-size: 12px;\n  }\n\n  &-meduim {\n    font-size: 14px;\n  }\n\n  &-large {\n    font-size: 16px;\n  }\n}\n\n\n// 중첩된 속성\n.box {\n\n  // font-Name : -Name이 들어가는 속성은 네임스페이스가 같다고 표현한다.\n  // 네임스페이스란 이름을 통해 구분가능한 범위를 만들어 내는 것\n  font: {\n    weight: bold;\n    size: 10px;\n    family: sans-serif;\n  };\n\n  margin: {\n    top: 10px;\n    left: 20px;\n  };\n\n  padding: {\n    top: 10px;\n    bottom: 40px;\n    left: 20px;\n    right: 30px;\n  };\n\n}\n\n// 변수를 사용하기\n// 유호 범위가 있다. 상위에 선언하면 하위에 모두 사용가능하고\n// {안에 선언하면 중갈호 범위 안에서만 사용 할 수 있다.}\n// 변수의 값을 재할당 할 수 있다. 재할당되면 밑의 재할당 된 값으로 할당된다.\n.container {\n  $size: 200px;\n  position: fixed;\n  top: $size;\n  .item {\n    $size: 100x;\n    width: $size;\n    height: $size;\n    transform: translateX($size);\n  }\n  left: $size;\n}\n\n\n// SCSS의 연산\n// + - * / % 연산이 가능하다. \n// / 연산자는 제대로 작용하지 않는다. font의 단축 속성이 /로 구분하기 때문에\n// / ()로 묶어 나누기 할 수 있다.\n// 변수를 통해서 $size/2 면 나눌 수 있다.\n// margin: 10px+20px / 2 앞의 연산자를 하면 연산으로 구분한다.\n// 산술연산시 같은 단위에서 사용해야한다.\n// calc()를 통해서 연산을 할 수있다.\ndiv {\n  width: 20px + 20px;\n  height: 40px - 10px;\n  font-size: 10px * 2;\n  margin: 30px / 2;\n  padding: 20px % 7;\n}\n\n.box {\n  background-color: royalblue;\n  width: calc(100% - 200px);\n  height: 100px;\n}\n\n// 재활용 MixIn\n// @mixin 키워드를 통해서 공통된 속성을 잴화용 가능하다\n// 재활용이 불가능하기 때문에 인수라는 개념을 제공한다.\n\n// .Mixin {\n//   width: 200px;\n//   height: 200px;\n//   background-color: orange;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// }\n\n// .Mixin .item {\n//   width: 100px;\n//   height: 100px;\n//   background-color: royalblue;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// }\n\n\n\n// 인수의 개념 함수처럼 사용가능하다.\n// 인수의 기본값을 지정할 수 있다.\n// 인수는 여러개 사용 할 수있다. \n@mixin center($size: 100px, $color: tomato) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: $size;\n  height: $size;\n}\n\n.Mixin {\n  @include center(200px);\n  .item {\n    // 매개변수의 순서를 맞춰줘야한다.\n    // 굳이 인수를 지정할 필요없이 키워드 인수를 사용할 수 있다.\n    // 아래와 같이 사용할 수 있다.\n    @include center($color: green);\n  }\n  .box {\n    @include center();\n  }\n}\n\n// 반복문\n// 선택자에게 바로 $i를 바로 css 코드에 사용 할 수 없다.\n// #기호를 i 값을 보간하여 사용해야 한다.\n// css 작성 범위 코드에서는 바로 사용 할 수 있다.\n@for $i from 1 through 10 {\n  .box:nth-child(#{$i}) {\n    width: 100px;\n  }\n}\n\n// 함수\n// 재활용도 할 수 있고, 요소의 비율을 지정할 때 사용 할 수 있다.\n\n// 재활용 용도\n@mixin center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n// 연산의 목적으로 만들어진다.\n@function ratio($size, $ratio){\n  @return $size * $ratio\n}\n\n.box {\n  $width: 100px;\n  width: $width;\n  height: ratio($width, 1/2);\n  @include center();\n}\n\n// 색상 내장함수\n.colorBox {\n  $color: royalblue;\n\n  width: 200px;\n  height: 100px;\n  margin: 20px;\n  border-radius: 10px;\n  background-color: $color;\n\n  &:hover {\n    background-color: darken(royalblue, 10%);\n  }\n  \n  &.built-in {\n    // 내장함수\n    // background-color: $color;\n    \n    // 생상의 조합 \n    // background-color: mix(royalblue, red);\n\n    // 밝게 표현 10% 만큼 발게 표현해준다.\n    // background-color: lighten(royalblue, 10%);\n    \n    // 10% 만큼 어둡게 표현한다.\n    // background-color: darken(royalblue, 10%);\n\n    // 채도를 높여주는 내장함수\n    // background-color: saturate(royalblue, 40%);\n\n    // 채도를 낮춰준다\n    // background-color: desaturate(royalblue, 40%);\n\n    // 색상을 회색화 한다.\n    // background-color: gray(royalblue);\n\n    // 생상을 반전시켜준다,\n    // background-color: invert(royalblue);\n\n    //투명도를 지정해준다.\n    // 표준에서는 4개의 인수지만, csss에서는 2개의 인수면 충분하다.\n    background-color: rgba(royalblue, .5);\n  }\n}\n\n\n\n// 데이터 종류\n$nubmer: 1; // .5 1px , 1em 다 숫자\n$string: bold; // 프러퍼티의 값, 경로\n$color: red; // red blue는 색상이댜 #fffff\n$boolean: true; // false\n$null: null; //null은 속성을 사용 안하도록  할 수 있다.\n\n// 배열과 유사하다. 1부터 시작한다.\n$list: orange, royalblue, yellow;\n\n// 객체 대이터와 비슷하다 key, value로 구분하다.\n$map: (\n  o: orange,\n  r: royalblue,\n  y: yellow\n);\n\n// foreach의 개념과 같다\n// list를 @each로 사용하기\n@each $c in $list {\n  .box {\n    color: $c;\n  }\n}\n\n@each $k, $v in $map {\n  .box-#{$k} {\n    color: $v;\n  }\n}\n\n// 재활용 @content 사용하기\n// include를 사용할 때 중갈호 안의 내용이 @content에 내용이 들어간다.\n@mixin left-top{\n  position: absolute;\n  top: 0;\n  left: 0;\n  @content;\n}\n\n.container{\n  width: 100px;\n  height: 100px;\n  @include left-top();\n}\n\n.box {\n  width: 200px;\n  height: 200px;\n  @include left-top(){\n    bottom: 0;\n    right: 0;\n    margin: auto;\n  }\n}\n"]}